openapi: 3.0.0
info:
  title: Sustainability Team A API
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: Position
  - name: Position-Templates
  - name: Files
  - name: Styles
  - name: Indicator
  - name: Auth
  - name: Health-Check
  - name: Position Parent Picker
  - name: Position Search

paths:
  /health-check:
    get:
      summary: Health Check Services (Postgres, Redis, Minio)
      description: This API will check all services are alive
      tags: [Health-Check]
      responses:
        '200':
          $ref: '#/components/schemas/HealthCheckResponse'

  /token:
    post:
      summary: Create a new JWT token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'

  /token/{preset}:
    get:
      summary: Quick mint a token by preset
      tags: [Auth]
      parameters:
        - name: preset
          in: path
          required: true
          schema:
            type: string
            enum: [A, B, C, D, E, F]
        - name: tenantId
          in: query
          schema: { type: string }
        - name: userId
          in: query
          schema: { type: string }
        - name: userName
          in: query
          schema: { type: string }
        - name: role
          in: query
          schema: { type: string }
        - name: expiresIn
          in: query
          schema:
            type: string
            default: 1h
      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/position-templates:
    post:
      summary: Create Position (TITLE / OUTLINE / SUMMARY / ASSET / FLOW / QUALITATIVE / INDICATOR)
      tags: [Position]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TitlePayload'
                - $ref: '#/components/schemas/OutlinePayload'
                - $ref: '#/components/schemas/SummaryPayload'
                - $ref: '#/components/schemas/AssetPayload'
                - $ref: '#/components/schemas/FlowPayload'
                - $ref: '#/components/schemas/QualitativePayload'
                - $ref: '#/components/schemas/IndicatorPayload'
              discriminator:
                propertyName: type
                mapping:
                  TITLE: '#/components/schemas/TitlePayload'
                  OUTLINE: '#/components/schemas/OutlinePayload'
                  SUMMARY: '#/components/schemas/SummaryPayload'
                  ASSET: '#/components/schemas/AssetPayload'
                  FLOW: '#/components/schemas/FlowPayload'
                  QUALITATIVE: '#/components/schemas/QualitativePayload'
                  INDICATOR: '#/components/schemas/IndicatorPayload'
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionControllerResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '409':
          description: Conflict error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictResponse'
        '500':
          description: Internal server error

  /api/v1/positions/tree:
    get:
      summary: Get Position Tree
      tags: [Position]
      security:
        - bearerAuth: []
      parameters:
        - name: locale
          in: query
          schema: { type: string, example: en }
      responses:
        '200':
          description: Position tree result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPositionTreeResponse'
        '404':
          description: Position not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Internal server error

  /api/v1/positions/search:
    post:
      summary: Search Position
      tags: [Position Search]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchPositionRequest'
      responses:
        '200':
          description: Search successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchPositionResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Internal server error

  /api/v1/positions/{id}:
    get:
      summary: Get Position by ID
      tags: [Position]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Position found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPositionByIdResponse'
        '404':
          description: Position not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Internal server error

    delete:
      summary: Delete Position by ID
      description: >
        Delete the specified position. Use `cascade=SUBTREE` to delete the entire subtree.
        Use `dryRun=true` to preview affected count (and IDs if requested) without applying.
      tags: [Position]
      security:
        - bearerAuth: []
      operationId: deletePositionById
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: cascade
          in: query
          schema:
            type: string
            enum: [SELF, SUBTREE]
            default: SELF
        - name: includeIds
          in: query
          schema: { type: boolean, default: false }
        - name: dryRun
          in: query
          schema: { type: boolean, default: false }
      responses:
        '200':
          description: Deleted (or previewed) successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePositionSuccessEnvelope'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: Position not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '409':
          description: Conflict (e.g., dependent data prevents deletion)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictResponse'
        '500':
          description: Internal server error

  # ... (other existing endpoints unchanged) ...

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter JWT token received from login endpoint

  schemas:
    # ... (your existing schemas unchanged) ...

    ToggleAffected:
      type: object
      properties:
        count:
          type: integer
          example: 3
        ids:
          type: array
          items:
            type: string
            format: uuid
          nullable: true

    DeletePositionResponse:
      type: object
      properties:
        positionId:
          type: string
          format: uuid
        cascade:
          type: string
          enum: [SELF, SUBTREE]
        dryRun:
          type: boolean
        deleted:
          type: boolean
          description: True only when a deletion was actually performed (dryRun=false).
        affected:
          $ref: '#/components/schemas/ToggleAffected'
      required: [positionId, cascade, dryRun, deleted, affected]

    DeletePositionSuccessEnvelope:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/DeletePositionResponse'
        message:
          type: string
          example: Deleted
      required: [data, message]

  responses:
    TokenResponse:
      description: JWT token created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedResponse'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenResponse'