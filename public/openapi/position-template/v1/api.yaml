{
  "openapi": "3.0.0",
  "info": {
    "title": "Sustainability Team A API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/health-check": {
      "get": {
        "summary": "Health Check Services (Postgres, Redis, Minio)",
        "description": "This API will check all services are alive",
        "tags": [
          "Health-Check"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/HealthCheckResponse"
          }
        }
      }
    },
    "/token": {
      "post": {
        "summary": "Create a new JWT token",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenResponse"
          }
        }
      }
    },
    "/token/{preset}": {
      "get": {
        "summary": "Quick mint a token by preset",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "preset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "A",
                "B",
                "C",
                "D",
                "E",
                "F"
              ]
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiresIn",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "1h"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/api/v1/position-templates": {
      "post": {
        "summary": "Create Position (TITLE / OUTLINE / SUMMARY / ASSET / FLOW / QUALITATIVE / INDICATOR)",
        "tags": [
          "Position"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TitlePayload"
                  },
                  {
                    "$ref": "#/components/schemas/OutlinePayload"
                  },
                  {
                    "$ref": "#/components/schemas/SummaryPayload"
                  },
                  {
                    "$ref": "#/components/schemas/AssetPayload"
                  },
                  {
                    "$ref": "#/components/schemas/FlowPayload"
                  },
                  {
                    "$ref": "#/components/schemas/QualitativePayload"
                  },
                  {
                    "$ref": "#/components/schemas/IndicatorPayload"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "TITLE": "#/components/schemas/TitlePayload",
                    "OUTLINE": "#/components/schemas/OutlinePayload",
                    "SUMMARY": "#/components/schemas/SummaryPayload",
                    "ASSET": "#/components/schemas/AssetPayload",
                    "FLOW": "#/components/schemas/FlowPayload",
                    "QUALITATIVE": "#/components/schemas/QualitativePayload",
                    "INDICATOR": "#/components/schemas/IndicatorPayload"
                  }
                }
              },
              "examples": {
                "TITLE": {
                  "summary": "TITLE",
                  "value": {
                    "type": "TITLE",
                    "name": {
                      "en": "Title Example",
                      "th": "Title ตัวอย่าง"
                    },
                    "sortingLevel": 2,
                    "styleId": "ed10bcec-eb0c-4e9d-b23e-0f211f60c8e7",
                    "description": "Additional info",
                    "isActive": true,
                    "title": {
                      "questionTexts": [
                        {
                          "locale": "en",
                          "text": "Describe scope and coverage"
                        },
                        {
                          "locale": "th",
                          "text": "อธิบายขอบเขตและความครอบคลุม"
                        }
                      ]
                    }
                  }
                },
                "OUTLINE": {
                  "summary": "OUTLINE",
                  "value": {
                    "type": "OUTLINE",
                    "name": {
                      "en": "Outline Example",
                      "th": "Outline ตัวอย่าง"
                    },
                    "sortingLevel": 1,
                    "startTerm": "2025-10-01",
                    "endTerm": "2026-09-30",
                    "parentId": "d7e49074-7f1a-473c-a015-5d3251b42154",
                    "description": "Additional info",
                    "styleId": "ed10bcec-eb0c-4e9d-b23e-0f211f60c8e6",
                    "isActive": true,
                    "outline": {
                      "useInReport": true
                    }
                  }
                },
                "SUMMARY": {
                  "summary": "SUMMARY",
                  "value": {
                    "type": "SUMMARY",
                    "name": {
                      "en": "Summary Example",
                      "th": "Summary ตัวอย่าง"
                    },
                    "sortingLevel": 1,
                    "startTerm": "2025-10-01",
                    "endTerm": "2026-09-30",
                    "parentId": "d7e49074-7f1a-473c-a015-5d3251b42154",
                    "description": "Additional info",
                    "styleId": "ed10bcec-eb0c-4e9d-b23e-0f211f60c8e6",
                    "isActive": true,
                    "summary": {
                      "useInReport": true,
                      "quantityId": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                },
                "ASSET": {
                  "summary": "ASSET",
                  "value": {
                    "type": "ASSET",
                    "name": {
                      "en": "Asset Example",
                      "th": "Asset ตัวอย่าง"
                    },
                    "sortingLevel": 1,
                    "startTerm": "2025-10-01",
                    "endTerm": "2026-09-30",
                    "parentId": "d7e49074-7f1a-473c-a015-5d3251b42154",
                    "description": "Additional info",
                    "styleId": "ed10bcec-eb0c-4e9d-b23e-0f211f60c8e6",
                    "isActive": true,
                    "asset": {
                      "quantityId": "123e4567-e89b-12d3-a456-426614174000",
                      "allowedDeviationPercent": 5,
                      "requireComment": false,
                      "priority": false,
                      "overviewAggregation": true,
                      "previousValue": false,
                      "useInReport": true
                    }
                  }
                },
                "FLOW": {
                  "summary": "FLOW",
                  "value": {
                    "type": "FLOW",
                    "name": {
                      "en": "Flow Example",
                      "th": "Flow ตัวอย่าง"
                    },
                    "sortingLevel": 1,
                    "startTerm": "2025-10-01",
                    "endTerm": "2026-09-30",
                    "parentId": "d7e49074-7f1a-473c-a015-5d3251b42154",
                    "description": "Additional info",
                    "styleId": "ed10bcec-eb0c-4e9d-b23e-0f211f60c8e6",
                    "isActive": true,
                    "flow": {
                      "quantityId": "123e4567-e89b-12d3-a456-426614174000",
                      "allowedDeviationPercent": 5,
                      "requireComment": false,
                      "priority": false,
                      "overviewAggregation": true,
                      "previousValue": false,
                      "useInReport": true
                    }
                  }
                },
                "QUALITATIVE_TEXT": {
                  "summary": "QUALITATIVE TEXT",
                  "value": {
                    "type": "QUALITATIVE",
                    "name": {
                      "en": "Qualitative Example",
                      "th": "Qualitative ตัวอย่าง"
                    },
                    "sortingLevel": 1,
                    "startTerm": "2025-10-01",
                    "endTerm": "2026-09-30",
                    "parentId": "d7e49074-7f1a-473c-a015-5d3251b42154",
                    "description": "Additional info",
                    "styleId": "ed10bcec-eb0c-4e9d-b23e-0f211f60c8e6",
                    "isActive": true,
                    "qualitative": {
                      "textOfQuestion": [
                        {
                          "locale": "en",
                          "text": "Question 1"
                        },
                        {
                          "locale": "th",
                          "text": "คำถามที่ 1"
                        }
                      ],
                      "choiceOfAnswer": "TEXT",
                      "priority": false,
                      "useInReport": true,
                      "minSelected": 1,
                      "maxSelected": 3,
                      "text": {
                        "requiredAnswer": true
                      }
                    }
                  }
                },
                "QUALITATIVE_SINGLE": {
                  "summary": "QUALITATIVE SINGLE",
                  "value": {
                    "type": "QUALITATIVE",
                    "name": {
                      "en": "Qualitative Example",
                      "th": "Qualitative ตัวอย่าง"
                    },
                    "sortingLevel": 1,
                    "startTerm": "2025-10-01",
                    "endTerm": "2026-09-30",
                    "parentId": "d7e49074-7f1a-473c-a015-5d3251b42154",
                    "description": "Additional info",
                    "styleId": "ed10bcec-eb0c-4e9d-b23e-0f211f60c8e6",
                    "isActive": true,
                    "qualitative": {
                      "textOfQuestion": [
                        {
                          "locale": "en",
                          "text": "Question 1"
                        },
                        {
                          "locale": "th",
                          "text": "คำถามที่ 1"
                        }
                      ],
                      "choiceOfAnswer": "SINGLE",
                      "priority": false,
                      "useInReport": true,
                      "minSelected": 0,
                      "maxSelected": 1,
                      "single": {
                        "options": [
                          {
                            "weight": 100,
                            "seq": 0,
                            "requireCommentOnFillout": true,
                            "labels": [
                              {
                                "locale": "en",
                                "text": "Compliant"
                              },
                              {
                                "locale": "th",
                                "text": "ปฏิบัติตาม"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                },
                "QUALITATIVE_MULTIPLE": {
                  "summary": "QUALITATIVE MULTIPLE",
                  "value": {
                    "type": "QUALITATIVE",
                    "name": {
                      "en": "Qualitative Example",
                      "th": "Qualitative ตัวอย่าง"
                    },
                    "sortingLevel": 1,
                    "startTerm": "2025-10-01",
                    "endTerm": "2026-09-30",
                    "parentId": "d7e49074-7f1a-473c-a015-5d3251b42154",
                    "description": "Additional info",
                    "styleId": "ed10bcec-eb0c-4e9d-b23e-0f211f60c8e6",
                    "isActive": true,
                    "qualitative": {
                      "textOfQuestion": [
                        {
                          "locale": "en",
                          "text": "Question 1"
                        },
                        {
                          "locale": "th",
                          "text": "คำถามที่ 1"
                        }
                      ],
                      "choiceOfAnswer": "MULTIPLE",
                      "priority": false,
                      "useInReport": true,
                      "minSelected": 0,
                      "maxSelected": 2,
                      "multiple": {
                        "options": [
                          {
                            "weight": 50,
                            "seq": 0,
                            "requireCommentOnFillout": true,
                            "labels": [
                              {
                                "locale": "en",
                                "text": "Partially Compliant"
                              },
                              {
                                "locale": "th",
                                "text": "ปฏิบิบางส่วน"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                },
                "INDICATOR": {
                  "summary": "INDICATOR",
                  "description": "\n                  - aggregationInterval can be MONTHLY , QUARTERLY , ANNUALLY\n                  - calculation can be FIRST_TOTALISE_THEN_APPLY or FIRST_APPLY_THEN_TOTALISE\n                  - docs: https://app.clickup.com/9014563457/v/dc/8cmymm1-70154/8cmymm1-70634\n                  ",
                  "value": {
                    "type": "INDICATOR",
                    "name": {
                      "en": "Indicator Example",
                      "th": "Indicator ตัวอย่าง"
                    },
                    "sortingLevel": 1,
                    "startTerm": "2025-10-01",
                    "endTerm": "2026-09-30",
                    "parentId": "d7e49074-7f1a-473c-a015-5d3251b42154",
                    "description": "Additional info",
                    "styleId": "ed10bcec-eb0c-4e9d-b23e-0f211f60c8e6",
                    "isActive": true,
                    "indicator": {
                      "quantityId": "qty_energy_intensity",
                      "aggregationInterval": "MONTHLY",
                      "calculation": "FIRST_TOTALISE_THEN_APPLY",
                      "formula": {
                        "raw": "#SampleImpact + $WasteReduction * (NewValue - OldValue)",
                        "tokens": [
                          {
                            "type": "impact",
                            "id": "impact_100",
                            "code": "I_0001",
                            "label": "SampleImpact"
                          },
                          {
                            "type": "operator",
                            "value": "+"
                          },
                          {
                            "type": "position",
                            "id": "pos_P0001",
                            "code": "P_0001",
                            "label": "Waste Reduction"
                          },
                          {
                            "type": "operator",
                            "value": "*"
                          },
                          {
                            "type": "group",
                            "children": [
                              {
                                "type": "variable",
                                "value": "NewValue"
                              },
                              {
                                "type": "operator",
                                "value": "-"
                              },
                              {
                                "type": "variable",
                                "value": "OldValue"
                              }
                            ]
                          }
                        ]
                      },
                      "useInReport": true
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionControllerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error (e.g., duplicate code or invalid parent)",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/positions/tree": {
      "get": {
        "summary": "Get Position Tree",
        "description": "Return positions in a tree structure by tenant",
        "tags": [
          "Position"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Position tree result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPositionTreeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Position not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/positions/search": {
      "post": {
        "summary": "Search Position",
        "description": "Return positions in a tree structure by tenant.\n- Default: return matched node(s) and full descendants.\n- Set `expand.ancestors=true` to include the ancestor path to the real root.\n- We never mutate `parentId`; deep nodes are rendered as top-level entries when their parents are not included.",
        "tags": [
          "Position Search"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchPositionRequest"
              },
              "examples": {
                "deepWithoutAncestors": {
                  "summary": "Deep node + all children (no ancestors)",
                  "value": {
                    "conditions": [
                      {
                        "field": "name",
                        "op": "contains",
                        "value": "1.3 Position Summary"
                      }
                    ]
                  }
                },
                "deepWithAncestors": {
                  "summary": "Deep node + all children + include ancestors",
                  "value": {
                    "conditions": [
                      {
                        "field": "name",
                        "op": "contains",
                        "value": "1.3 Position Summary"
                      }
                    ],
                    "expand": {
                      "descendants": "ALL",
                      "ancestors": true
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPositionResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Matched subtree",
                    "value": {
                      "data": [
                        {
                          "id": "e312ea08-2db9-47bb-a13a-c17bdcac7927",
                          "parentId": "08244519-0dc4-46a4-8e15-2d43d8eea4cc",
                          "type": "SUMMARY",
                          "typeIcon": "S",
                          "name": {
                            "en": "1.3 Position Summary",
                            "th": null
                          },
                          "sortingLevel": null,
                          "code": "P0004",
                          "startTerm": "2025-10-01",
                          "endTerm": "2026-09-30",
                          "tags": [],
                          "quantityRequired": null,
                          "isActive": true,
                          "orderIndex": 1,
                          "hasChildren": true,
                          "children": [
                            {
                              "id": "895d1eb8-703e-4bd0-a2d9-46d53fc5772e",
                              "parentId": "e312ea08-2db9-47bb-a13a-c17bdcac7927",
                              "type": "TITLE",
                              "typeIcon": "T",
                              "name": {
                                "en": "1.3.1 Position Title",
                                "th": null
                              },
                              "sortingLevel": null,
                              "code": "P0005",
                              "startTerm": "2025-10-01",
                              "endTerm": "2026-09-30",
                              "tags": [],
                              "quantityRequired": null,
                              "isActive": true,
                              "orderIndex": 1,
                              "hasChildren": false,
                              "children": []
                            }
                          ]
                        }
                      ],
                      "message": "search successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/positions/{id}": {
      "get": {
        "summary": "Get Position by ID",
        "tags": [
          "Position"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Position found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPositionByIdResponse"
                }
              }
            }
          },
          "404": {
            "description": "Position not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete Position by ID",
        "description": "Delete the specified position. Use `cascade=SUBTREE` to delete the entire subtree.\nUse `dryRun=true` to preview affected count (and IDs if requested) without applying. Associated file attachments are permanently removed as part of this operation. If the position is linked to system data (`isUsed=true`) or still has child positions, the API returns a conflict response instead of deleting.",
        "tags": [
          "Position"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "operationId": "deletePositionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cascade",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "SELF",
                "SUBTREE"
              ],
              "default": "SUBTREE"
            }
          },
          {
            "name": "includeIds",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "dryRun",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted (or previewed) successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePositionSuccessEnvelope"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Position not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict – deletion is blocked because the position is in use or has child positions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PositionLinkedToSystemDataResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ParentPositionLinkedResponse"
                    }
                  ]
                },
                "examples": {
                  "parentPositionLinked": {
                    "summary": "Parent Position Linked",
                    "value": {
                      "type": "about:blank",
                      "title": "Parent Position Linked",
                      "status": 409,
                      "detail": "Cannot delete this position because it still has child positions. Remove or reassign child positions first.",
                      "error": "PARENT_POSITION_LINKED",
                      "childCount": 2
                    }
                  },
                  "dataLinkedToSystemData": {
                    "summary": "Data Linked to System Data",
                    "value": {
                      "type": "about:blank",
                      "title": "Data Linked to System Data",
                      "status": 409,
                      "detail": "Cannot delete data because the position is linked to system data (site, product group, questionnaire, report, or workflow).",
                      "error": "POSITION_LINKED_TO_SYSTEM_DATA",
                      "usage": {
                        "isUsed": true
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Edit Position by ID",
        "description": "Update an existing position. Supports changing the position type and all associated fields when the caller confirms any disruptive changes. Editing performs a soft delete of the previous revision so existing attachments remain unless replaced.",
        "tags": [
          "Position"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "operationId": "updatePositionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "forceTypeChange",
            "in": "query",
            "required": false,
            "description": "Set to true after the user confirms a type change that might reset downstream data. When omitted or false, the API may reject type changes for positions already in use.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePositionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Position updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionControllerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Position not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (e.g., type change forbidden without confirmation or name duplicate)",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/position-templates/parent-picker/roots": {
      "get": {
        "summary": "List roots for parent picker",
        "tags": [
          "Position Parent Picker"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "typeIn",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "TITLE,OUTLINE"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "TITLE",
                              "OUTLINE",
                              "SUMMARY",
                              "ASSET",
                              "FLOW",
                              "QUALITATIVE"
                            ]
                          },
                          "displayName": {
                            "type": "string"
                          },
                          "startTerm": {
                            "type": "string",
                            "nullable": true
                          },
                          "endTerm": {
                            "type": "string",
                            "nullable": true
                          },
                          "hasChildren": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "type",
                          "displayName",
                          "hasChildren"
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": true
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          }
        }
      }
    },
    "/api/v1/position-templates/parent-picker/{positionId}/children": {
      "get": {
        "summary": "List children for parent picker",
        "tags": [
          "Position Parent Picker"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "positionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "typeIn",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "TITLE,OUTLINE"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "parent": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        },
                        "startTerm": {
                          "type": "string",
                          "nullable": true
                        },
                        "endTerm": {
                          "type": "string",
                          "nullable": true
                        }
                      },
                      "required": [
                        "id",
                        "type",
                        "displayName"
                      ]
                    },
                    "nextCursor": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": true
                    }
                  },
                  "required": [
                    "parent",
                    "items"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "404": {
            "description": "PARENT_NOT_FOUND"
          }
        }
      }
    },
    "/api/v1/position-templates/parents/{parentId}/allowed-terms": {
      "get": {
        "summary": "Get allowed Start/End Terms for a selected parent",
        "description": "Returns the allowed date range (minStart/maxEnd) for creating children of the selected parent, with the date display pattern.",
        "tags": [
          "Position-Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowedTermsControllerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Parent not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/position-templates/{positionId}/children/allowed-terms": {
      "get": {
        "summary": "Get allowed Start/End Terms for a position with children",
        "description": "Returns the editable start/end range for the selected position, constrained by its parent and immediate children, along with the date display pattern.",
        "tags": [
          "Position-Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "positionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChildTermWindowControllerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Position not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/position-templates/{positionId}/files/presign": {
      "post": {
        "summary": "Request presigned URLs for file uploads",
        "description": "Send file metadata to request presigned URLs for uploading files to storage.",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "positionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the position template"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "clientFileId": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Client-generated unique ID for the file"
                        },
                        "fileName": {
                          "type": "string",
                          "description": "Name of the file (with extension)"
                        },
                        "mimeType": {
                          "type": "string",
                          "description": "MIME type of the file"
                        },
                        "sizeBytes": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "Size of the file in bytes"
                        },
                        "checksumSHA256": {
                          "type": "string",
                          "description": "Optional SHA256 checksum of the file (hex)"
                        },
                        "disposition": {
                          "type": "string",
                          "enum": [
                            "inline",
                            "attachment"
                          ],
                          "description": "Optional content disposition"
                        }
                      },
                      "required": [
                        "clientFileId",
                        "fileName",
                        "mimeType",
                        "sizeBytes"
                      ]
                    }
                  }
                },
                "required": [
                  "files"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Presigned URLs created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "positionId": {
                      "type": "string",
                      "description": "The ID of the position template"
                    },
                    "uploadBatchId": {
                      "type": "string",
                      "description": "Batch ID for this upload request"
                    },
                    "expiresAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Expiration time of the presigned URLs"
                    },
                    "maxPartSizeBytes": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Maximum allowed size for each uploaded part"
                    },
                    "files": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "clientFileId": {
                            "type": "string",
                            "description": "Client-provided ID for matching request"
                          },
                          "objectKey": {
                            "type": "string",
                            "description": "Key of the object in storage"
                          },
                          "putUrl": {
                            "type": "string",
                            "format": "uri",
                            "description": "Presigned PUT URL for file upload"
                          },
                          "headers": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Headers required when uploading"
                          },
                          "disposition": {
                            "type": "string",
                            "enum": [
                              "inline",
                              "attachment"
                            ],
                            "description": "Content disposition for the file"
                          }
                        },
                        "required": [
                          "clientFileId",
                          "objectKey",
                          "putUrl",
                          "headers"
                        ]
                      }
                    }
                  },
                  "required": [
                    "positionId",
                    "uploadBatchId",
                    "expiresAt",
                    "maxPartSizeBytes",
                    "files"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/position-templates/{positionId}/files/confirm": {
      "post": {
        "summary": "Confirm uploaded files",
        "description": "Confirm that uploaded files are successfully stored and associate them with the position.",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "positionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the position"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uploadBatchId": {
                    "type": "string",
                    "description": "Batch ID of the uploaded files"
                  },
                  "files": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "clientFileId": {
                          "type": "string",
                          "description": "Client-generated ID for correlating upload requests"
                        },
                        "objectKey": {
                          "type": "string",
                          "description": "Storage object key of the uploaded file"
                        },
                        "fileName": {
                          "type": "string",
                          "description": "Original file name"
                        },
                        "contentType": {
                          "type": "string",
                          "description": "MIME type of the file"
                        },
                        "sizeBytes": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "Size of the file in bytes"
                        },
                        "sha256": {
                          "type": "string",
                          "description": "SHA256 checksum of the file (hex)"
                        }
                      },
                      "required": [
                        "clientFileId",
                        "objectKey",
                        "fileName",
                        "contentType",
                        "sizeBytes",
                        "sha256"
                      ]
                    }
                  }
                },
                "required": [
                  "uploadBatchId",
                  "files"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Files confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "positionId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The ID of the position"
                    },
                    "files": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "File ID"
                          },
                          "positionId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Associated position ID"
                          },
                          "fileName": {
                            "type": "string",
                            "description": "File name"
                          },
                          "contentType": {
                            "type": "string",
                            "description": "MIME type of the file"
                          },
                          "sizeBytes": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Size of the file in bytes"
                          },
                          "objectKey": {
                            "type": "string",
                            "description": "Storage object key"
                          },
                          "downloadUrl": {
                            "type": "string",
                            "format": "uri",
                            "description": "Presigned GET URL for downloading file"
                          },
                          "uploadedBy": {
                            "type": "string",
                            "description": "User who uploaded the file"
                          },
                          "uploadedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Upload timestamp"
                          }
                        },
                        "required": [
                          "id",
                          "positionId",
                          "fileName",
                          "contentType",
                          "sizeBytes",
                          "objectKey",
                          "downloadUrl",
                          "uploadedBy",
                          "uploadedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "positionId",
                    "files"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/position-templates/{positionId}/files/{fileId}": {
      "delete": {
        "summary": "Soft delete a file attachment",
        "description": "Marks the specified file attachment as deleted while retaining a recovery record. Objects flagged for soft deletion follow the storage retention policy before permanent removal.",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "positionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the position template that owns the attachment"
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the file attachment to soft delete"
          }
        ],
        "responses": {
          "200": {
            "description": "File marked as deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSoftDeleteControllerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "File or position not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (e.g., file already deleted or locked)",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/files/{fileId}/download": {
      "get": {
        "summary": "Download file by fileId",
        "description": "Download a file using its unique ID. The file can be of any content type.",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique ID of the file to download"
          }
        ],
        "responses": {
          "200": {
            "description": "File downloaded successfully",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "file_id": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "required": [
                    "error",
                    "name",
                    "message",
                    "file_id"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Failed to get file content from Minio",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "bucket": {
                      "type": "string"
                    },
                    "fileName": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "name",
                    "message",
                    "bucket",
                    "fileName"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/styles": {
      "get": {
        "summary": "Get All Styles",
        "tags": [
          "Styles"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get all styles result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPositionStylesResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/position-templates/{positionId}/activation": {
      "patch": {
        "summary": "Toggle Active (SELF / SUBTREE)",
        "description": "Activate/deactivate position for a specific node or the entire subtree. When disabled, set closeDate for all nodes in that group.",
        "tags": [
          "Position-Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "positionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Id of the position to be toggled"
          },
          {
            "name": "includeIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "if true, return list of affected ids"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToggleActivationRequest"
              },
              "examples": {
                "dryRunPreview": {
                  "summary": "Dry-run preview (no changes applied)",
                  "value": {
                    "active": false,
                    "cascade": "SUBTREE",
                    "dryRun": true
                  }
                },
                "activateSelf": {
                  "summary": "Activate only this node",
                  "value": {
                    "active": true,
                    "cascade": "SELF"
                  }
                },
                "deactivateSubtree": {
                  "summary": "Deactivate all nodes in the subtree + set reason",
                  "value": {
                    "active": false,
                    "cascade": "SUBTREE",
                    "reason": "Archived by policy",
                    "dryRun": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToggleActivationSuccessEnvelope"
                },
                "examples": {
                  "deactivatedWithIds": {
                    "summary": "Deactivate subtree: set closeDate, returns count & ids (includeIds=true)",
                    "value": {
                      "data": {
                        "positionId": "11111111-1111-1111-1111-111111111111",
                        "active": false,
                        "closeDate": "2025-09-04T12:00:00.000Z",
                        "cascade": "SUBTREE",
                        "dryRun": false,
                        "affected": {
                          "count": 3,
                          "ids": [
                            "11111111-1111-1111-1111-111111111111",
                            "22222222-2222-2222-2222-222222222222",
                            "33333333-3333-3333-3333-333333333333"
                          ]
                        }
                      },
                      "message": "Deactivated"
                    }
                  },
                  "activatedSelf": {
                    "summary": "Activate only this node",
                    "value": {
                      "data": {
                        "positionId": "11111111-1111-1111-1111-111111111111",
                        "active": true,
                        "cascade": "SELF",
                        "dryRun": false,
                        "affected": {
                          "count": 1
                        }
                      },
                      "message": "Activated"
                    }
                  },
                  "dryRunExample": {
                    "summary": "Dry-run preview (no changes applied)",
                    "value": {
                      "data": {
                        "positionId": "11111111-1111-1111-1111-111111111111",
                        "active": false,
                        "cascade": "SUBTREE",
                        "dryRun": true,
                        "affected": {
                          "count": 4,
                          "ids": [
                            "11111111-1111-1111-1111-111111111111",
                            "22222222-2222-2222-2222-222222222222",
                            "33333333-3333-3333-3333-333333333333",
                            "44444444-4444-4444-4444-444444444444"
                          ]
                        }
                      },
                      "message": "Deactivated"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (validation error e.g. body/param)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToggleActivationBadRequest"
                }
              }
            }
          },
          "404": {
            "description": "Not found position",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToggleActivationNotFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToggleActivationServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/indicator/operations": {
      "get": {
        "summary": "Operations Library (for the popup)",
        "tags": [
          "Indicator"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": " fuzzy search for name description searchTeams exprTemplate"
          },
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "EXCEL",
                "LIBRARY"
              ],
              "example": "EXCEL",
              "description": "Can be EXCEL OR LIBRARY"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            },
            "description": "Number of items per page (max 100)"
          },
          {
            "name": "cursor",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "op_1"
                          },
                          "name": {
                            "type": "string",
                            "example": "Operation 1"
                          },
                          "expr": {
                            "type": "string",
                            "example": "test"
                          },
                          "category": {
                            "type": "string",
                            "enum": [
                              "EXCEL",
                              "LIBRARY"
                            ],
                            "example": "EXCEL"
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          },
                          "examples": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "test"
                            ]
                          },
                          "isActive": {
                            "type": "boolean",
                            "example": true
                          },
                          "displayOrder": {
                            "type": "integer",
                            "example": 1
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "expr",
                          "category",
                          "isActive",
                          "displayOrder"
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    }
                  },
                  "required": [
                    "items",
                    "nextCursor"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/positions": {
      "get": {
        "summary": "Get all positions (Flat list)",
        "description": "Return all positions in a flat list. Use cursor-based pagination",
        "tags": [
          "Position"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search name (full-text contains, case-insensitive)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "typeIn",
            "in": "query",
            "required": false,
            "description": "Comma-separated list of position types to include (e.g. TITLE,SUMMARY)",
            "schema": {
              "$ref": "#/components/schemas/PositionTypeInQuery"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of items per page (default 20, max 100)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "opaque cursor to next page (from nextCursor previous response)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flat list of positions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter JWT token received from login endpoint"
      }
    },
    "schemas": {
      "HealthCheckResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2025-09-08T07:31:12.224Z"
          },
          "details": {
            "type": "object",
            "properties": {
              "postgres": {
                "type": "string",
                "example": "good"
              },
              "redis": {
                "type": "string",
                "example": "good"
              },
              "minio": {
                "type": "string",
                "example": "good"
              }
            },
            "required": [
              "postgres",
              "redis",
              "minio"
            ]
          }
        },
        "required": [
          "timestamp",
          "details"
        ],
        "additionalProperties": true
      },
      "TokenClaims": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid",
            "example": "ea06fd5f-9292-4863-b9a6-34e8602d204b"
          },
          "permissionPositions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Periods: Read"
            }
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "userName": {
            "type": "string",
            "example": "qa-a"
          },
          "role": {
            "type": "string",
            "example": "qa"
          }
        },
        "required": [
          "tenantId",
          "permissionPositions",
          "userId",
          "userName",
          "role"
        ]
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "claims": {
            "$ref": "#/components/schemas/TokenClaims"
          },
          "preset": {
            "type": "string",
            "example": "A"
          }
        },
        "required": [
          "token",
          "claims",
          "preset"
        ],
        "additionalProperties": true
      },
      "TokenRequestBody": {
        "type": "object",
        "properties": {
          "preset": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "C",
              "D",
              "E",
              "F"
            ],
            "example": "A"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Periods: Read"
            }
          },
          "tenantId": {
            "type": "string",
            "format": "uuid",
            "example": "ea06fd5f-9292-4863-b9a6-34e8602d204b"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "userName": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "expiresIn": {
            "type": "string",
            "default": "1h",
            "example": "1h"
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "PositionName": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "nullable": true,
            "example": "GRI 302 Energy 2016"
          },
          "th": {
            "type": "string",
            "nullable": true,
            "example": "พลังงาน 2016"
          }
        },
        "required": [
          "en",
          "th"
        ],
        "additionalProperties": false
      },
      "QuestionText": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "example": "en"
          },
          "text": {
            "type": "string",
            "example": "How would you rate leadership?"
          }
        },
        "required": [
          "locale",
          "text"
        ],
        "additionalProperties": false
      },
      "TitlePayload": {
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "nullable": true,
            "properties": {
              "questionTexts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "locale": {
                      "type": "string",
                      "example": "en"
                    },
                    "text": {
                      "type": "string",
                      "example": "Energy consumption within the organization"
                    }
                  },
                  "required": [
                    "locale",
                    "text"
                  ]
                }
              }
            },
            "required": [
              "questionTexts"
            ]
          }
        },
        "additionalProperties": false
      },
      "OutlinePayload": {
        "type": "object",
        "properties": {
          "outline": {
            "type": "object",
            "nullable": true,
            "properties": {
              "useInReport": {
                "type": "boolean",
                "example": true
              }
            },
            "required": [
              "useInReport"
            ]
          }
        },
        "additionalProperties": false
      },
      "SummaryPayload": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "object",
            "nullable": true,
            "properties": {
              "quantityId": {
                "type": "string",
                "nullable": true,
                "example": "qty_area_m2"
              },
              "useInReport": {
                "type": "boolean",
                "example": true
              }
            },
            "required": [
              "quantityId",
              "useInReport"
            ]
          }
        },
        "additionalProperties": false
      },
      "AssetPayload": {
        "type": "object",
        "properties": {
          "asset": {
            "type": "object",
            "nullable": true,
            "properties": {
              "quantityId": {
                "type": "string",
                "example": "qty_electric_kwh"
              },
              "allowedDeviationPercent": {
                "type": "number",
                "nullable": true,
                "example": 5
              },
              "requireComment": {
                "type": "boolean",
                "nullable": true,
                "example": false
              },
              "priority": {
                "type": "string",
                "nullable": true,
                "example": "MEDIUM"
              },
              "overviewAggregation": {
                "type": "string",
                "nullable": true,
                "example": "SUM"
              },
              "previousValue": {
                "type": "number",
                "nullable": true,
                "example": 123.45
              },
              "useInReport": {
                "type": "boolean",
                "example": true
              }
            },
            "required": [
              "quantityId",
              "useInReport"
            ]
          }
        },
        "additionalProperties": false
      },
      "FlowPayload": {
        "type": "object",
        "properties": {
          "flow": {
            "type": "object",
            "nullable": true,
            "properties": {
              "quantityId": {
                "type": "string",
                "example": "qty_water_m3"
              },
              "allowedDeviationPercent": {
                "type": "number",
                "nullable": true,
                "example": 10
              },
              "requireComment": {
                "type": "boolean",
                "nullable": true,
                "example": false
              },
              "priority": {
                "type": "string",
                "nullable": true,
                "example": "LOW"
              },
              "overviewAggregation": {
                "type": "string",
                "nullable": true,
                "example": "AVG"
              },
              "previousValue": {
                "type": "number",
                "nullable": true,
                "example": 77.1
              },
              "useInReport": {
                "type": "boolean",
                "example": true
              }
            },
            "required": [
              "quantityId",
              "useInReport"
            ]
          }
        },
        "additionalProperties": false
      },
      "QualitativeOptionLabelsPayload": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "local": {
              "type": "string"
            },
            "text": {
              "type": "string",
              "example": ""
            }
          },
          "example": [
            {
              "locale": "en",
              "text": "Compliant"
            },
            {
              "locale": "th",
              "text": "ปฏิบัติตาม"
            }
          ]
        }
      },
      "QualitativeOptionsPayload": {
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "weight": {
                  "type": "number",
                  "example": 100
                },
                "requireCommentOnFillout": {
                  "type": "boolean",
                  "example": true
                },
                "seq": {
                  "type": "number",
                  "example": 0,
                  "nullable": true
                },
                "labels": {
                  "$ref": "#/components/schemas/QualitativeOptionLabelsPayload"
                }
              }
            }
          }
        }
      },
      "QualitativePayload": {
        "type": "object",
        "properties": {
          "qualitative": {
            "type": "object",
            "nullable": true,
            "properties": {
              "textOfQuestion": {
                "type": "object",
                "nullable": true,
                "description": "ข้อความคำถามตาม locale",
                "additionalProperties": true
              },
              "choiceOfAnswer": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "TEXT",
                  "SINGLE",
                  "MULTIPLE"
                ]
              },
              "priority": {
                "type": "string",
                "nullable": true
              },
              "minSelected": {
                "type": "integer",
                "nullable": true
              },
              "maxSelected": {
                "type": "integer",
                "nullable": true
              },
              "useInReport": {
                "type": "boolean",
                "nullable": true
              },
              "text": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "requiredAnswer": {
                    "type": "boolean",
                    "nullable": true
                  }
                }
              },
              "single": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "labels": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "locale": {
                                "type": "string"
                              },
                              "text": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "locale",
                              "text"
                            ]
                          }
                        },
                        "weight": {
                          "type": "number",
                          "nullable": true
                        },
                        "seq": {
                          "type": "integer",
                          "nullable": true
                        },
                        "requireCommentOnFillout": {
                          "type": "boolean",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              },
              "multiple": {
                "$ref": "#/components/schemas/QualitativePayload/properties/qualitative/properties/single"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "IndicatorOperatorToken": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "operator"
            ]
          },
          "value": {
            "type": "string",
            "enum": [
              "+",
              "-",
              "*",
              "/",
              "%",
              "=",
              "≠",
              "(",
              ")",
              "."
            ],
            "example": "+"
          }
        },
        "required": [
          "type",
          "value"
        ],
        "additionalProperties": false
      },
      "IndicatorVariableToken": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "variable"
            ]
          },
          "value": {
            "type": "string",
            "example": "NewValue"
          }
        },
        "required": [
          "type",
          "value"
        ],
        "additionalProperties": false
      },
      "IndicatorImpactToken": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "impact"
            ]
          },
          "id": {
            "type": "string",
            "example": "impact_100"
          },
          "code": {
            "type": "string",
            "example": "I_0001"
          },
          "label": {
            "type": "string",
            "example": "SampleImpact"
          }
        },
        "required": [
          "type",
          "id",
          "code",
          "label"
        ],
        "additionalProperties": false
      },
      "IndicatorPositionToken": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "position"
            ]
          },
          "id": {
            "type": "string",
            "example": "pos_P0001"
          },
          "code": {
            "type": "string",
            "example": "P_0001"
          },
          "label": {
            "type": "string",
            "example": "Waste Reduction"
          }
        },
        "required": [
          "type",
          "id",
          "code",
          "label"
        ],
        "additionalProperties": false
      },
      "IndicatorToken": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/IndicatorImpactToken"
          },
          {
            "$ref": "#/components/schemas/IndicatorPositionToken"
          },
          {
            "$ref": "#/components/schemas/IndicatorVariableToken"
          },
          {
            "$ref": "#/components/schemas/IndicatorOperatorToken"
          },
          {
            "$ref": "#/components/schemas/IndicatorGroupToken"
          }
        ]
      },
      "IndicatorGroupToken": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group"
            ]
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndicatorToken"
            }
          }
        },
        "required": [
          "type",
          "children"
        ],
        "additionalProperties": false
      },
      "IndicatorFormula": {
        "type": "object",
        "required": [
          "raw",
          "tokens"
        ],
        "properties": {
          "raw": {
            "type": "string",
            "example": "#SampleImpact + $WasteReduction * (NewValue - OldValue)",
            "description": "สูตรการคำนวณในรูป raw string"
          },
          "tokens": {
            "type": "array",
            "description": "โครงสร้างสูตรที่แตก token ออกมาเป็น element",
            "items": {
              "$ref": "#/components/schemas/IndicatorToken"
            }
          }
        }
      },
      "IndicatorPayload": {
        "type": "object",
        "properties": {
          "indicator": {
            "type": "object",
            "nullable": true,
            "properties": {
              "quantityId": {
                "type": "string",
                "example": "qty_co2e_ton"
              },
              "aggregationInterval": {
                "type": "string",
                "nullable": true,
                "example": "MONTH"
              },
              "calculation": {
                "type": "string",
                "nullable": true,
                "example": "FORMULA"
              },
              "formula": {
                "type": "object",
                "properties": {
                  "raw": {
                    "type": "string",
                    "nullable": true
                  },
                  "tokens": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                },
                "required": [
                  "raw",
                  "tokens"
                ]
              },
              "useInReport": {
                "type": "boolean",
                "nullable": true
              },
              "positionsResolved": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "nullable": true
              },
              "impactProfilesResolved": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "nullable": true
              },
              "variablesResolved": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "nullable": true
              },
              "operatorsResolved": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "nullable": true
              }
            },
            "required": [
              "quantityId",
              "formula"
            ]
          }
        },
        "additionalProperties": false
      },
      "CreatePositionRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TITLE",
              "OUTLINE",
              "SUMMARY",
              "ASSET",
              "FLOW",
              "INDICATOR",
              "QUALITATIVE"
            ]
          },
          "name": {
            "$ref": "#/components/schemas/PositionName"
          },
          "sortingLevel": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "example": null
          },
          "startTerm": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2025-10-01"
          },
          "endTerm": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2026-09-30"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": null
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "tag-env",
              "tag-hr"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "styleId": {
            "type": "string",
            "format": "uuid",
            "example": "ed10bcec-eb0c-4e9d-b23e-0f211f60c8e6"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "title": {
            "$ref": "#/components/schemas/TitlePayload"
          },
          "outline": {
            "$ref": "#/components/schemas/OutlinePayload"
          },
          "summary": {
            "$ref": "#/components/schemas/SummaryPayload"
          },
          "asset": {
            "$ref": "#/components/schemas/AssetPayload"
          },
          "flow": {
            "$ref": "#/components/schemas/FlowPayload"
          },
          "qualitative": {
            "$ref": "#/components/schemas/QualitativePayload"
          },
          "indicator": {
            "$ref": "#/components/schemas/IndicatorPayload"
          }
        },
        "required": [
          "type",
          "name",
          "styleId"
        ],
        "additionalProperties": false
      },
      "CreatePositionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/PositionName"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "sortingLevel": {
            "type": "integer",
            "nullable": true
          },
          "startTerm": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2025-10-01"
          },
          "endTerm": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2026-09-30"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "style": {
            "type": "string",
            "example": "DEFAULT_16_normal"
          },
          "isActive": {
            "type": "boolean"
          },
          "title": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TitlePayload",
                "nullable": true
              }
            ]
          },
          "outline": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OutlinePayload",
                "nullable": true
              }
            ]
          },
          "summary": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SummaryPayload",
                "nullable": true
              }
            ]
          },
          "asset": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AssetPayload",
                "nullable": true
              }
            ]
          },
          "flow": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FlowPayload",
                "nullable": true
              }
            ]
          },
          "qualitative": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QualitativePayload",
                "nullable": true
              }
            ]
          },
          "indicator": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IndicatorPayload",
                "nullable": true
              }
            ]
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "id",
          "tenantId",
          "type",
          "name",
          "isActive",
          "createdBy",
          "createdAt",
          "style",
          "tags"
        ],
        "additionalProperties": false
      },
      "PositionControllerResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CreatePositionResponse"
          },
          "message": {
            "type": "string",
            "example": "created successfully"
          }
        },
        "required": [
          "data",
          "message"
        ]
      },
      "FileItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "sizeBytes": {
            "type": "number"
          },
          "uploadedBy": {
            "type": "string"
          },
          "uploadedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "fileName",
          "contentType",
          "sizeBytes",
          "uploadedBy",
          "uploadedAt"
        ],
        "additionalProperties": false
      },
      "FileSoftDeleteResult": {
        "type": "object",
        "properties": {
          "positionId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the position template that owns the file"
          },
          "fileId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the file attachment"
          },
          "softDeleted": {
            "type": "boolean",
            "description": "True when the attachment has been marked as deleted"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the attachment was soft deleted"
          },
          "deleteRetentionExpiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the file will be purged permanently, if applicable"
          }
        },
        "required": [
          "positionId",
          "fileId",
          "softDeleted",
          "deletedAt"
        ],
        "additionalProperties": false
      },
      "FileSoftDeleteControllerResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FileSoftDeleteResult"
          },
          "message": {
            "type": "string",
            "example": "File marked as deleted"
          }
        },
        "required": [
          "data"
        ],
        "additionalProperties": true
      },
      "ValidationErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetail"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "Validation Error"
              },
              "details": {
                "type": "object"
              }
            },
            "required": [
              "error",
              "details"
            ],
            "additionalProperties": true
          }
        ],
        "example": {
          "type": "about:blank",
          "title": "Validation Error",
          "status": 400,
          "detail": "One or more fields are invalid.",
          "error": "VALIDATION_ERROR",
          "details": {
            "name": [
              "Name is required"
            ]
          }
        }
      },
      "ConflictResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetail"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "POSITION_NAME_CONFLICT"
              },
              "message": {
                "type": "string"
              },
              "localeConflict": {
                "type": "string",
                "example": "en"
              }
            },
            "required": [
              "error",
              "message"
            ],
            "additionalProperties": true
          }
        ],
        "example": {
          "type": "about:blank",
          "title": "Conflict",
          "status": 409,
          "detail": "The position name already exists.",
          "error": "POSITION_NAME_CONFLICT",
          "message": "Position name already exists.",
          "localeConflict": "en"
        }
      },
      "NotFoundResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetail"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "Position Not Found"
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ],
            "additionalProperties": true
          }
        ],
        "example": {
          "type": "about:blank",
          "title": "Position Not Found",
          "status": 404,
          "detail": "The requested position does not exist.",
          "error": "POSITION_NOT_FOUND"
        }
      },
      "PositionNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "type": {
            "type": "string",
            "example": "TITLE"
          },
          "typeIcon": {
            "type": "string",
            "example": "T"
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "example": {
              "en": "1.3.1 Position Title",
              "th": null
            }
          },
          "sortingLevel": {
            "type": "integer",
            "nullable": true
          },
          "code": {
            "type": "string",
            "example": "P0005"
          },
          "startTerm": {
            "type": "string",
            "nullable": true,
            "example": "2025-10-01"
          },
          "endTerm": {
            "type": "string",
            "nullable": true,
            "example": "2026-09-30"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "quantityRequired": {
            "type": "number",
            "nullable": true
          },
          "outline": {
            "type": "object",
            "properties": {
              "useInReport": {
                "type": "boolean"
              }
            },
            "required": [
              "useInReport"
            ],
            "nullable": true
          },
          "summary": {
            "type": "object",
            "properties": {
              "useInReport": {
                "type": "boolean"
              }
            },
            "required": [
              "useInReport"
            ],
            "nullable": true
          },
          "flow": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          },
          "asset": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          },
          "qualitative": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "orderIndex": {
            "type": "integer",
            "minimum": 1
          },
          "hasChildren": {
            "type": "boolean"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionNode"
            }
          }
        },
        "required": [
          "id",
          "parentId",
          "type",
          "typeIcon",
          "name",
          "sortingLevel",
          "code",
          "startTerm",
          "endTerm",
          "tags",
          "quantityRequired",
          "isActive",
          "orderIndex",
          "hasChildren",
          "children"
        ]
      },
      "PositionTreeNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "TITLE",
              "OUTLINE",
              "SUMMARY",
              "ASSET",
              "FLOW",
              "INDICATOR",
              "QUALITATIVE"
            ]
          },
          "typeIcon": {
            "type": "string",
            "example": "T"
          },
          "name": {
            "$ref": "#/components/schemas/PositionName"
          },
          "sortingLevel": {
            "type": "integer",
            "nullable": true
          },
          "code": {
            "type": "string"
          },
          "startTerm": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "endTerm": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "quantityRequired": {
            "type": "boolean",
            "nullable": true
          },
          "useInReport": {
            "type": "boolean",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "orderIndex": {
            "type": "integer"
          },
          "hasChildren": {
            "type": "boolean"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionTreeNode"
            }
          }
        },
        "required": [
          "id",
          "parentId",
          "type",
          "typeIcon",
          "name",
          "sortingLevel",
          "code",
          "startTerm",
          "endTerm",
          "tags",
          "isActive",
          "orderIndex",
          "hasChildren",
          "children"
        ],
        "additionalProperties": false
      },
      "GetPositionTreeData": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "example": "en"
          },
          "rootId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": null
          },
          "depth": {
            "type": "integer",
            "example": 2
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionTreeNode"
            }
          }
        },
        "required": [
          "locale",
          "rootId",
          "depth",
          "generatedAt",
          "nodes"
        ],
        "additionalProperties": false
      },
      "GetPositionTreeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GetPositionTreeData"
          },
          "message": {
            "type": "string",
            "example": "fetch successfully"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "additionalProperties": true
      },
      "SearchPositionRequest": {
        "type": "object",
        "description": "Advanced search for positions. Name matching is locale-agnostic and case-insensitive over PositionName.\n`descendants` controls how deep to expand children (ALL or depth=0..N). `ancestors=true` includes full path back to the actual root. We do not mutate parentId.",
        "properties": {
          "conditions": {
            "type": "array",
            "description": "List of AND conditions. Supported fields include: name, code, type, isActive, createdAt, updatedAt, startTerm, endTerm, tags, id, parentId, sortingLevel, etc.",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "example": "name",
                  "description": "Field to filter. For names, use 'name'. For tags relation, use 'tags'. For dates: createdAt/updatedAt/startTerm/endTerm."
                },
                "op": {
                  "type": "string",
                  "example": "contains",
                  "description": "Operators vary by field. Strings: contains|equals|startsWith|endsWith|notContains|notEquals|notBeginsWith|notEndsWith. Dates: on|after|before|between|gt|gte|lt|lte. Lists: in|notIn. Tags (relation): contains|containsAny|containsAll|containsOnly|notContains, etc."
                },
                "value": {
                  "description": "Operator value.",
                  "oneOf": [
                    {
                      "type": "string",
                      "nullable": true
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "integer"
                          }
                        ]
                      }
                    }
                  ],
                  "example": "1.3 Position Summary"
                }
              },
              "required": [
                "field",
                "op",
                "value"
              ]
            }
          },
          "expand": {
            "type": "object",
            "description": "Control tree expansion. `descendants` defines children depth (ALL or 0..N). `ancestors` includes parent chain to root. `rootMode` is reserved for future use; currently parentId is never mutated.",
            "properties": {
              "descendants": {
                "description": "Expand children depth. 'ALL' = full subtree; 0 = only the matched node.",
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "ALL"
                    ],
                    "example": "ALL"
                  },
                  {
                    "type": "integer",
                    "minimum": 0,
                    "example": 0
                  }
                ],
                "default": "ALL"
              },
              "ancestors": {
                "type": "boolean",
                "description": "Include ancestors (parents) up to the actual root.",
                "default": false,
                "example": true
              },
              "rootMode": {
                "type": "string",
                "description": "Response root mode (reserved).",
                "enum": [
                  "matched",
                  "auto"
                ],
                "default": "matched"
              }
            },
            "additionalProperties": false,
            "default": {}
          }
        },
        "required": [
          "conditions"
        ],
        "example": {
          "conditions": [
            {
              "field": "name",
              "op": "contains",
              "value": "1.3.1 Position Title"
            }
          ],
          "expand": {
            "descendants": "ALL",
            "ancestors": true,
            "rootMode": "matched"
          }
        }
      },
      "SearchPositionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionNode"
            }
          },
          "message": {
            "type": "string",
            "example": "search successfully"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "additionalProperties": true
      },
      "GetPositionByIdData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/PositionName"
          },
          "sortingLevel": {
            "type": "integer",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "displayId": {
            "type": "string"
          },
          "startTerm": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endTerm": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "style": {
            "type": "string"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileItem"
            }
          },
          "quantityRequired": {
            "type": "boolean",
            "nullable": true
          },
          "title": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TitlePayload",
                "nullable": true
              }
            ]
          },
          "outline": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OutlinePayload",
                "nullable": true
              }
            ]
          },
          "summary": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SummaryPayload",
                "nullable": true
              }
            ]
          },
          "asset": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AssetPayload",
                "nullable": true
              }
            ]
          },
          "flow": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FlowPayload",
                "nullable": true
              }
            ]
          },
          "qualitative": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QualitativePayload",
                "nullable": true
              }
            ]
          },
          "createdBy": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "hasChildren": {
            "type": "boolean"
          },
          "indicator": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IndicatorPayload",
                "nullable": true
              }
            ]
          },
          "usage": {
            "$ref": "#/components/schemas/PositionUsageStatus"
          }
        },
        "required": [
          "id",
          "tenantId",
          "type",
          "name",
          "code",
          "displayId",
          "isActive",
          "style",
          "tags",
          "files",
          "createdBy",
          "createdAt",
          "hasChildren"
        ],
        "additionalProperties": false
      },
      "GetPositionByIdResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GetPositionByIdData"
          },
          "message": {
            "type": "string",
            "example": "fetch successfully"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "additionalProperties": true
      },
      "AllowedTermsParent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "TITLE",
              "OUTLINE",
              "SUMMARY",
              "ASSET",
              "FLOW",
              "INDICATOR",
              "QUALITATIVE"
            ]
          },
          "displayName": {
            "type": "string",
            "example": "Topic Standard-2"
          },
          "startTerm": {
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "example": "2025-10-01"
          },
          "endTerm": {
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "example": "2026-09-30"
          }
        },
        "required": [
          "id",
          "type",
          "displayName",
          "startTerm",
          "endTerm"
        ]
      },
      "ChildTermWindowPosition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "TITLE",
              "OUTLINE",
              "SUMMARY",
              "ASSET",
              "FLOW",
              "INDICATOR",
              "QUALITATIVE"
            ]
          },
          "displayName": {
            "type": "string",
            "example": "Position A"
          },
          "startTerm": {
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "example": "2025-04-01"
          },
          "endTerm": {
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "example": "2026-03-31"
          },
          "hasParent": {
            "type": "boolean",
            "example": true
          },
          "hasChildren": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "id",
          "type",
          "displayName",
          "startTerm",
          "endTerm",
          "hasParent",
          "hasChildren"
        ],
        "additionalProperties": false
      },
      "AllowedWindow": {
        "type": "object",
        "properties": {
          "minStart": {
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "example": "2025-10-01"
          },
          "maxEnd": {
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "example": "2026-09-30"
          }
        },
        "required": [
          "minStart",
          "maxEnd"
        ]
      },
      "AllowedTermRange": {
        "type": "object",
        "properties": {
          "min": {
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "example": "2025-01-01"
          },
          "max": {
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "example": "2025-06-01"
          }
        },
        "required": [
          "min",
          "max"
        ],
        "additionalProperties": false
      },
      "ConstraintSources": {
        "type": "object",
        "properties": {
          "parent": {
            "$ref": "#/components/schemas/AllowedTermRange"
          },
          "children": {
            "$ref": "#/components/schemas/AllowedTermRange"
          }
        },
        "required": [
          "parent",
          "children"
        ],
        "additionalProperties": false
      },
      "DateDisplayFormat": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "string",
            "enum": [
              "MM/YY",
              "DD/MM/YYYY"
            ],
            "example": "DD/MM/YYYY"
          }
        },
        "required": [
          "pattern"
        ]
      },
      "AllowedTermsResponse": {
        "type": "object",
        "properties": {
          "parent": {
            "$ref": "#/components/schemas/AllowedTermsParent"
          },
          "allowedWindow": {
            "$ref": "#/components/schemas/AllowedWindow"
          },
          "displayFormat": {
            "$ref": "#/components/schemas/DateDisplayFormat"
          }
        },
        "required": [
          "parent",
          "allowedWindow",
          "displayFormat"
        ],
        "additionalProperties": true
      },
      "ChildTermWindowResponse": {
        "type": "object",
        "properties": {
          "position": {
            "$ref": "#/components/schemas/ChildTermWindowPosition"
          },
          "allowedStart": {
            "$ref": "#/components/schemas/AllowedTermRange"
          },
          "allowedEnd": {
            "$ref": "#/components/schemas/AllowedTermRange"
          },
          "constraintSources": {
            "$ref": "#/components/schemas/ConstraintSources"
          },
          "displayFormat": {
            "$ref": "#/components/schemas/DateDisplayFormat"
          }
        },
        "required": [
          "position",
          "allowedStart",
          "allowedEnd",
          "constraintSources",
          "displayFormat"
        ],
        "additionalProperties": false
      },
      "AllowedTermsControllerResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AllowedTermsResponse"
          },
          "message": {
            "type": "string",
            "example": "fetch successfully"
          }
        },
        "required": [
          "data"
        ],
        "additionalProperties": true
      },
      "ChildTermWindowControllerResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ChildTermWindowResponse"
          },
          "message": {
            "type": "string",
            "example": "fetch successfully"
          }
        },
        "required": [
          "data"
        ],
        "additionalProperties": true
      },
      "UnauthorizedResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetail"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "Unauthorized"
              },
              "message": {
                "type": "string",
                "example": "Unauthorized - Missing or invalid token"
              }
            },
            "required": [
              "error",
              "message"
            ],
            "additionalProperties": true
          }
        ],
        "example": {
          "type": "about:blank",
          "title": "Unauthorized",
          "status": 401,
          "detail": "Missing or invalid token.",
          "error": "UNAUTHORIZED"
        }
      },
      "ForbiddenResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetail"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "Forbidden"
              },
              "message": {
                "type": "string",
                "example": "Forbidden: insufficient permissions"
              },
              "code": {
                "type": "string",
                "example": "PERMISSION_DENIED"
              },
              "permssion_requirs": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "details": {
                "type": "object"
              }
            },
            "required": [
              "error",
              "message"
            ],
            "additionalProperties": true
          }
        ],
        "example": {
          "type": "about:blank",
          "title": "Forbidden",
          "status": 403,
          "detail": "You do not have permission to perform this action.",
          "error": "FORBIDDEN",
          "code": "PERMISSION_DENIED",
          "permssion_requirs": [
            "POSITION_WRITE"
          ]
        }
      },
      "GetPositionStylesResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "key": {
                  "type": "string",
                  "example": "default"
                },
                "label": {
                  "type": "string",
                  "example": "Style Default (16px, normal, black)"
                }
              }
            }
          }
        },
        "required": [
          "items"
        ],
        "additionalProperties": true
      },
      "ToggleActivationRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "example": false,
            "description": "true = active, false = inactive"
          },
          "cascade": {
            "type": "string",
            "enum": [
              "SELF",
              "SUBTREE"
            ],
            "default": "SUBTREE",
            "example": "SUBTREE",
            "description": "Only affect this node (SELF) Or all nodes in subtree (SUBTREE)"
          },
          "reason": {
            "type": "string",
            "maxLength": 500,
            "nullable": true,
            "example": "Archived by policy",
            "description": "Reason for toggle "
          },
          "dryRun": {
            "type": "boolean",
            "default": false,
            "example": false,
            "description": "true = preview only, false = apply change"
          }
        },
        "required": [
          "active"
        ]
      },
      "ToggleAffected": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "minimum": 0,
            "example": 3
          },
          "ids": {
            "type": "array",
            "description": " When query param includeIds=true",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true,
            "example": [
              "11111111-1111-1111-1111-111111111111",
              "22222222-2222-2222-2222-222222222222",
              "33333333-3333-3333-3333-333333333333"
            ]
          }
        },
        "required": [
          "count"
        ]
      },
      "ToggleActivationResponse": {
        "type": "object",
        "properties": {
          "positionId": {
            "type": "string",
            "format": "uuid",
            "example": "11111111-1111-1111-1111-111111111111"
          },
          "active": {
            "type": "boolean",
            "example": false
          },
          "closeDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Only set when deactivate (active=false)",
            "example": "2025-09-04T12:00:00.000Z"
          },
          "cascade": {
            "type": "string",
            "enum": [
              "SELF",
              "SUBTREE"
            ],
            "example": "SUBTREE"
          },
          "dryRun": {
            "type": "boolean",
            "example": false
          },
          "affected": {
            "$ref": "#/components/schemas/ToggleAffected"
          }
        },
        "required": [
          "positionId",
          "active",
          "cascade",
          "dryRun",
          "affected"
        ],
        "additionalProperties": true
      },
      "ToggleActivationSuccessEnvelope": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ToggleActivationResponse"
          },
          "message": {
            "type": "string",
            "example": "Deactivated"
          }
        },
        "required": [
          "data",
          "message"
        ]
      },
      "ToggleActivationBadRequest": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Bad Request"
          },
          "message": {
            "description": "Details of validation error",
            "example": "[{ code: 'invalid_type', ... }]"
          }
        },
        "required": [
          "error",
          "message"
        ]
      },
      "ToggleActivationNotFound": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "PositionNotFoundError"
          },
          "message": {
            "type": "string",
            "example": "Position with id ... not found"
          }
        },
        "required": [
          "error",
          "message"
        ]
      },
      "ToggleActivationServerError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Internal Error"
          },
          "message": {
            "type": "string",
            "example": "Unexpected error ..."
          }
        },
        "required": [
          "error",
          "message"
        ],
        "additionalProperties": true
      },
      "PositionTypeInQuery": {
        "type": "string",
        "description": "Comma-separated list of position types to include. Allowed values: TITLE, OUTLINE, SUMMARY, ASSET, FLOW, INDICATOR, QUALITATIVE.",
        "example": "SUMMARY,ASSET"
      },
      "PositionListItem": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "parentId": {
                "type": "string",
                "format": "uuid",
                "nullable": true
              },
              "type": {
                "type": "string",
                "enum": [
                  "TITLE",
                  "OUTLINE",
                  "SUMMARY",
                  "ASSET",
                  "FLOW",
                  "INDICATOR",
                  "QUALITATIVE"
                ]
              },
              "typeIcon": {
                "type": "string",
                "example": "S"
              },
              "name": {
                "$ref": "#/components/schemas/PositionName"
              },
              "sortingLevel": {
                "type": "integer",
                "nullable": true
              },
              "code": {
                "type": "string",
                "nullable": true,
                "example": "P0001"
              },
              "startTerm": {
                "type": "string",
                "format": "date",
                "nullable": true
              },
              "endTerm": {
                "type": "string",
                "format": "date",
                "nullable": true
              },
              "closeDate": {
                "type": "string",
                "format": "date",
                "nullable": true
              },
              "isActive": {
                "type": "boolean"
              },
              "style": {
                "type": "string",
                "example": "Style Default (16px,normal,black)"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "description": {
                "type": "string",
                "nullable": true
              },
              "files": {
                "type": "array",
                "description": "ไม่ได้ expand (API นี้คืน [])",
                "items": {
                  "type": "object"
                }
              },
              "createdBy": {
                "type": "string",
                "example": "qa"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedBy": {
                "type": "string",
                "nullable": true
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            },
            "required": [
              "id",
              "type",
              "typeIcon",
              "name",
              "sortingLevel",
              "code",
              "startTerm",
              "endTerm",
              "closeDate",
              "isActive",
              "style",
              "parentId",
              "tags",
              "description",
              "files",
              "createdBy",
              "createdAt",
              "updatedBy",
              "updatedAt"
            ],
            "additionalProperties": true,
            "description": "return only relate types"
          },
          {
            "$ref": "#/components/schemas/TitlePayload"
          },
          {
            "$ref": "#/components/schemas/OutlinePayload"
          },
          {
            "$ref": "#/components/schemas/SummaryPayload"
          },
          {
            "$ref": "#/components/schemas/AssetPayload"
          },
          {
            "$ref": "#/components/schemas/FlowPayload"
          },
          {
            "$ref": "#/components/schemas/QualitativePayload"
          },
          {
            "$ref": "#/components/schemas/IndicatorPayload"
          }
        ]
      },
      "PositionListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionListItem"
            }
          },
          "nextCursor": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "data",
          "nextCursor"
        ],
        "additionalProperties": true
      },
      "BadRequestResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetail"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "VALIDATION_ERROR"
              },
              "details": {
                "type": "object"
              }
            },
            "required": [
              "error"
            ],
            "additionalProperties": true
          }
        ],
        "example": {
          "type": "about:blank",
          "title": "Bad Request",
          "status": 400,
          "detail": "The request could not be processed.",
          "error": "BAD_REQUEST",
          "details": {
            "body": "Malformed JSON"
          }
        }
      },
      "DeletePositionResponse": {
        "type": "object",
        "properties": {
          "positionId": {
            "type": "string",
            "format": "uuid"
          },
          "cascade": {
            "type": "string",
            "enum": [
              "SELF",
              "SUBTREE"
            ]
          },
          "dryRun": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean",
            "description": "True only when a deletion was actually performed (dryRun=false)."
          },
          "affected": {
            "$ref": "#/components/schemas/ToggleAffected"
          },
          "filesDeleted": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of file attachments permanently removed with this position."
          }
        },
        "required": [
          "positionId",
          "cascade",
          "dryRun",
          "deleted",
          "affected",
          "filesDeleted"
        ]
      },
      "DeletePositionSuccessEnvelope": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeletePositionResponse"
          },
          "message": {
            "type": "string",
            "example": "Deleted"
          }
        },
        "required": [
          "data",
          "message"
        ]
      },
      "PositionUsageStatus": {
        "type": "object",
        "description": "Summarizes whether the position is already assigned for downstream usage, so the UI can enforce edit rules.",
        "properties": {
          "isUsed": {
            "type": "boolean",
            "description": "True when the position is referenced by at least one dependent entity."
          }
        },
        "required": [
          "isUsed"
        ],
        "additionalProperties": false
      },
      "UpdatePositionRequest": {
        "description": "Payload for editing a position. Mirrors the create payload but is used when updating an existing position.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreatePositionRequest"
          }
        ]
      },
      "PositionLinkedToSystemDataResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetail"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "POSITION_LINKED_TO_SYSTEM_DATA"
              },
              "message": {
                "type": "string",
                "example": "Cannot delete data because the position is linked to system data (site, product group, questionnaire, report, or workflow)."
              },
              "usage": {
                "$ref": "#/components/schemas/PositionUsageStatus",
                "description": "Usage status when evaluating deletion constraints."
              }
            },
            "required": [
              "error",
              "message",
              "usage"
            ],
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "about:blank",
          "title": "Data Linked to System Data",
          "status": 409,
          "detail": "Cannot delete data because the position is linked to system data.",
          "error": "POSITION_LINKED_TO_SYSTEM_DATA",
          "usage": {
            "isUsed": true
          }
        }
      },
      "ParentPositionLinkedResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetail"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "PARENT_POSITION_LINKED"
              },
              "message": {
                "type": "string",
                "example": "Cannot delete this position because it still has child positions. Remove or reassign child positions first."
              },
              "childCount": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of direct child positions that block deletion."
              }
            },
            "required": [
              "error",
              "message"
            ],
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "about:blank",
          "title": "Parent Position Linked",
          "status": 409,
          "detail": "Cannot delete this position because it still has child positions.",
          "error": "PARENT_POSITION_LINKED",
          "childCount": 2
        }
      },
      "ProblemDetail": {
        "type": "object",
        "description": "Standard problem detail defined by RFC 9457.",
        "properties": {
          "type": {
            "type": "string",
            "format": "uri",
            "description": "URI reference identifying the problem type."
          },
          "title": {
            "type": "string",
            "description": "Short, human-readable summary of the problem."
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "description": "HTTP status code generated for this problem."
          },
          "detail": {
            "type": "string",
            "description": "Human-readable explanation specific to this occurrence."
          },
          "instance": {
            "type": "string",
            "format": "uri",
            "description": "URI reference identifying this specific occurrence."
          }
        },
        "required": [
          "type",
          "title",
          "status"
        ],
        "additionalProperties": true,
        "example": {
          "type": "about:blank",
          "title": "Example problem",
          "status": 500,
          "detail": "Example detail."
        }
      }
    },
    "responses": {
      "TokenResponse": {
        "description": "JWT token created successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TokenResponse"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ForbiddenResponse"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/UnauthorizedResponse"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Position"
    },
    {
      "name": "Position-Templates"
    },
    {
      "name": "Files"
    },
    {
      "name": "Styles"
    },
    {
      "name": "Indicator"
    },
    {
      "name": "Auth"
    },
    {
      "name": "Health-Check"
    },
    {
      "name": "Position Parent Picker"
    },
    {
      "name": "Position Search"
    }
  ]
}
